@model HumanResourceHelth.Model.PracticeQuestions

@using HumanResourceHelth.Model.Resources;
@{
    ViewBag.Title = "Create";
    Session["Backto"] = "Updates";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    bool isArabic = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.IsRightToLeft;
    string dir = isArabic ? "rtl" : "ltr";
    var alignclass = isArabic ? "pull-left" : "pull-right";
    var labelClass = isArabic ? "pull-right" : "pull-left";
    var txtlignclass = isArabic ? "text-right" : "text-left";
    var rotate = isArabic ? "-webkit-transform:rotate(180deg);-moz-transform: rotate(180deg);-ms-transform: rotate(180deg);-o-transform: rotate(180deg);transform: rotate(180deg);" : "";
    var modal_close = isArabic ? "margin: -15px auto -15px -15px" : "margin: -15px -15px -15px auto";
    HumanResourceHelth.DataAccess.UnitOfWork unit = new HumanResourceHelth.DataAccess.UnitOfWork();
    List<HumanResourceHelth.Model.FunctionPractice> functionPractices = unit.FunctionPracticeRepo.GetAll();
}
<div class="container" dir="@dir">
    <div class="panel panel-info">
        <div class="panel-heading">

            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <div class="row">
                    <h1 class="h2 @alignclass"> @Resources.General.NewQuestion</h1>
                </div>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <div class="btn-group ml-2 col-lg-12">
                        <a class="btn btn-lg btn-warning @labelClass" href="@Url.Action("Index")">
                            <i class="fa fa-backward" style="@rotate"></i>
                            @Resources.General.Back
                        </a>
                    </div>
                </div>
            </div>

        </div>
        <div class="panel-body h4" dir="@dir">

            <div class="m-5 p-5">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row">
                            <div class="form-group col-lg-6 @labelClass">
                                <label for="" class="control-label col-md-4 @labelClass">@Resources.General.Practice</label>
                                <div class="col-md-8">
                                    <select id="FunctionPractice" class="form-control">
                                        <option value="">@Resources.General.Select</option>
                                        @foreach (HumanResourceHelth.Model.FunctionPractice practice in functionPractices)
                                        {
                                            <option value="@practice.Id">
                                                @if (isArabic)
                                                {@practice.PracticeTitleAr}
                                            else
                                            { @practice.PracticeTitle}
                                            </option>
                                        }
                                    </select>
                                    @Html.HiddenFor(model => model.Practice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Practice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-lg-6 ">
                                <label for="" class="control-label col-md-4 @labelClass">@Resources.General.QuestionRespondent</label>
                                <div class="col-md-8">
                                    <select id="RespondentOptions" name="RespondentOptions" required class="form-control">
                                        <option value="">@Resources.General.Select</option>
                                        @if (isArabic)
                                        {
                                            foreach (KeyValuePair<int, string> item in (new HumanResourceHelth.Model.Respondent()).respondentAR)
                                            {
                                                <option value="@item.Key">@item.Value</option>
                                            }
                                        }
                                        else
                                        {
                                            foreach (KeyValuePair<int, string> item in (new HumanResourceHelth.Model.Respondent()).respondent)
                                            {
                                                <option value="@item.Key">@item.Value</option>
                                            }
                                        }
                                    </select>
                                    @Html.HiddenFor(model => model.Respondent, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Respondent, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6 @labelClass">
                                <label for="" class="control-label col-md-4 @labelClass">@Resources.General.QuestionEnglish</label>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Question, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Question, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group col-lg-6">
                                <label for="" class="control-label col-md-4 @labelClass">@Resources.General.QuestionArabic</label>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.QuestionAr, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.QuestionAr, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                <label for="" class="control-label col-md-4 @labelClass">@Resources.General.Status</label>
                                <div class="col-md-8">
                                    <div class="checkbox">
                                        @Html.EditorFor(model => model.Status)
                                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Create" class="btn btn-default" />
                                </div>
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>
<script>
    $("#FunctionPractice").on("change", function () {
        $("#Practice").val($("#FunctionPractice").val());
        //make ajax call
        if ($(this).val() != '') {
            $.ajax({
                url: "@Url.Action("CheckPlan", "PracticeQuestions")",
                data: { practiceId: $("#FunctionPractice").val() },
                type: "GET",
                success: function (data) {
                    toastr.success("Data Saved Successffly")
                    if (data.isPlanPublic == "public") {
                        $("#RespondentOptions option[value='8']").prop('selected', true);
                        $("#RespondentOptions").prop('disabled', true);
                        
                    }
                    else {
                        $("#RespondentOptions option[value='']").prop('selected', true);
                        $("#RespondentOptions").prop('disabled', false);
                    }
                    $("#Respondent").val($("#RespondentOptions").val() != '' ? parseInt($("#RespondentOptions").val()) : $("#RespondentOptions").val());
                },
                error: function () {
                    toastr.error("Error")
                }
            });
        }
    });
    $("#RespondentOptions").change(function () {

        $("#Respondent").val($("#RespondentOptions").val() != '' ? parseInt($("#RespondentOptions").val()) : $("#RespondentOptions").val());

    });
</script>


